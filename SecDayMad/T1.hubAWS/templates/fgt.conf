Content-Type: multipart/mixed; boundary="==AWS=="
MIME-Version: 1.0

--==AWS==
Content-Type: text/x-shellscript; charset="us-ascii"
MIME-Version: 1.0

config system global
set hostname ${fgt_id}
set admin-sport ${admin_port}
end
config system interface
edit port1                            
set alias mgmt-ha
set mode static
set ip ${port1_ip} ${port1_mask}
set allowaccess ping https ssh
set mtu-override enable
set mtu 9001
next
edit port2
set alias public
set mode static
set ip ${port2_ip} ${port2_mask}
set allowaccess ping 
set mtu-override enable
set mtu 9001
next
edit port3
set alias private
set mode static
set ip ${port3_ip} ${port3_mask}
set allowaccess ping https ssh
set mtu-override enable
set mtu 9001
next
end
config system api-user
edit api-user
set api-key ${api_key}
set accprofile "prof_admin"
next
end
config router static
edit 1
set device port2
set gateway ${port2_gw}
next
edit 2
set dst ${spoke-1-vm_net}
set gateway ${port3_gw}
set device port3
next
edit 3
set dst ${spoke-2-vm_net}
set gateway ${port3_gw}
set device port3
next
end
config system zone
edit "vxlan-to-hub"
next
end
config vpn ipsec phase1-interface
edit "advpn-public"
set type dynamic
set interface "port2"
set peertype any
set net-device enable
set proposal aes128-sha256 aes256-sha256 3des-sha256 aes128-sha1 aes256-sha1 3des-sha1
set add-route disable
set dpd on-idle
set auto-discovery-sender enable
set psksecret ${advpn-ipsec-psk}
set dpd-retryinterval 5
next
end
config vpn ipsec phase2-interface
edit "advpn-public"
set phase1name "advpn-public"
set proposal aes128-sha1 aes256-sha1 3des-sha1 aes128-sha256 aes256-sha256 3des-sha256
next
end
config system interface
edit "advpn-public"
set ip ${hub_advpn-ip1} 255.255.255.255
set remote-ip ${hub_advpn-ip2} 255.255.255.0
set allowaccess ping
next
end
config firewall address
edit "n-subnet-spoke-1"
set subnet ${spoke-1-vm_net}
next
edit "n-subnet-spoke-2"
set subnet ${spoke-2-vm_net}
next
edit "n-spokes-onprem"
set subnet ${spokes-onprem-cidr}
next
edit "n-advpn-public"
set subnet ${hub_advpn-net}
next
end
config firewall addrgrp
edit "g-nets-spoke-hub"
set member "n-subnet-spoke-1" "n-subnet-spoke-2"
next
edit "g-nets-site"
set member "n-advpn-public" "n-spokes-onprem"
next
end
config firewall policy
edit 1
set name "spoke-hub-to-spoke-hub"
set srcintf "port3"
set dstintf "port3"
set action accept
set srcaddr "g-nets-spoke-hub"
set dstaddr "g-nets-spoke-hub"
set schedule "always"
set service "ALL"
set logtraffic all
next
edit 2
set name "spoke-hub-to-public"
set srcintf "port3"
set dstintf "port2"
set action accept
set srcaddr "g-nets-spoke-hub"
set dstaddr "all"
set schedule "always"
set service "ALL"
set nat enable
set logtraffic all
next
edit 3
set name "spoke-sites-to-spoke-hub"
set srcintf "advpn-public"
set dstintf "port3"
set action accept
set srcaddr "g-nets-site"
set dstaddr "g-nets-spoke-hub"
set schedule "always"
set service "ALL"
set logtraffic all
next
edit 4
set name "spoke-site-to-spoke-site"
set srcintf "advpn-public"
set dstintf "advpn-public"
set action accept
set srcaddr "g-nets-site"
set dstaddr "g-nets-site"
set schedule "always"
set service "ALL"
set logtraffic all
next
edit 5
set name "spoke-site-to-hub-peer"
set srcintf "advpn-public"
set dstintf "vxlan-to-hub"
set action accept
set srcaddr "all"
set dstaddr "all"
set schedule "always"
set service "ALL"
set logtraffic all
set nat enable
next
edit 6
set name "hub-peer-to-spoke-site"
set srcintf "vxlan-to-hub"
set dstintf "advpn-public"
set action accept
set srcaddr "all"
set dstaddr "all"
set schedule "always"
set service "ALL"
set logtraffic all
set nat enable
next
edit 7
set name "spoke-hub-to-hub-peer"
set srcintf "port3"
set dstintf "vxlan-to-hub"
set action accept
set srcaddr "g-nets-spoke-hub"
set dstaddr "all"
set schedule "always"
set service "ALL"
set logtraffic all
set nat enable
next
edit 8
set name "hub-peer-to-spoke-hub"
set srcintf "vxlan-to-hub"
set dstintf "port3"
set action accept
set srcaddr "all"
set dstaddr "g-nets-spoke-hub"
set schedule "always"
set service "ALL"
set logtraffic all
set nat enable
next
end
config router access-list
edit "acl-hub-cidr-bgp-out"
config rule
edit 1
set prefix ${spoke-1-vm_net}
next
edit 2
set prefix ${spoke-2-vm_net}
next
end
next
edit "acl-spokes-cidr-bgp-out"
config rule
edit 1
set prefix 172.16.0.0/12
next
end
next
end
config router route-map
edit "rm-hub-bgp-out"
config rule
edit 1
set match-ip-address "acl-hub-cidr-bgp-out"
next
end
next
edit "rm-sites-advpn-out"
config rule
edit 1
set match-ip-address "acl-spokes-cidr-bgp-out"
next
end
next
end
config router bgp
set as ${hub_bgp-asn}
set router-id ${hub_bgp-id}
set keepalive-timer 1
set holdtime-timer 3
set ebgp-multipath enable
set graceful-restart enable
config neighbor
edit ${hub-peer_vxlan-ip1}
set ebgp-enforce-multihop enable
set soft-reconfiguration enable
set route-map-out "rm-hub-bgp-out"
set remote-as ${hub-peer_bgp-asn}
next
end
config neighbor-group
edit "branch-peers-1"
set soft-reconfiguration enable
set ebgp-enforce-multihop enable
set route-map-out "rm-sites-advpn-out"
set remote-as ${sites_bgp-asn}
next
end
config neighbor-range
edit 1
set prefix 10.10.10.0 255.255.255.0
set neighbor-group "branch-peers-1"
next
end
config redistribute "static"
set status enable
end
end
config system ha
set group-name AWS-HA
set mode a-p
set hbdev port1 50
set session-pickup enable
set ha-mgmt-status enable
config ha-mgmt-interface
edit 1
set interface port1
set gateway ${port1_gw}
next
end
set override disable
set priority ${fgt_priority}
set unicast-hb enable
set unicast-hb-peerip ${peerip}
end
config system sdn
edit aws-ha
set type aws
set use-metadata-iam enable
next
end
config system vdom-exception
edit 1
set object system.interface
next
edit 2
set object router.static
next
edit 3
set object firewall.vip
next
end

%{ if type == "byol" }
--==AWS==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="license"

${file(license_file)}

%{ endif }
--==AWS==--
